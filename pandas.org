# -*- org-confirm-babel-evaluate: nil; -*-

#+TITLE: Python for Data Analysis with Hy
#+STARTUP: content
* Setup
Import ~numpy~, ~pandas~ and ~matplotlib~ optionally starting =*Hy*=
session as well as define helper functions.

#+name: my-hy-setup
#+begin_src hy :session Hy :results output
  (import [numpy :as np])
  (import [pandas :as pd])
  (import [matplotlib.pyplot :as plt])
  (import [tabulate [tabulate]])
  (import sys)
  (import [hy.contrib.hy-repr [hy-repr-register]])

  (setv sys.ps2 "") ; Disable annoying "..."

  (plt.ion)

  (defn print-org-table [frame]
    (print)
    (print (tabulate frame :headers "keys" :tablefmt "orgtbl")))

  (hy-repr-register pd.DataFrame
                            :placeholder "HY THERE"
                            (fn [frame]
                              (tabulate frame :headers "keys" :tablefmt "orgtbl")))
#+end_src

#+RESULTS: my-hy-setup

* 5 Getting Started with pandas
** TODO 5.1 Introduction to pandas Data Structures (Series)
*** Series
So, ~Series~ is a one dimensional array-like object with data labels ~index~.
In context of ~DataFrame~, ~Series~ is a column.

- Set ~obj~ and see it's ~index~
  #+begin_src hy :session Hy :results output
    (setx obj (pd.Series [4 7 -5 3]))
  #+end_src

  #+RESULTS:
  : 0    4
  : 1    7
  : 2   -5
  : 3    3
  : dtype: int64
- ~obj~ ~index~
  #+begin_src hy :session Hy :results output
  obj.index
  #+end_src

  #+RESULTS:
  : RangeIndex(start=0, stop=4, step=1)

  - Underlying array
    #+begin_src hy :session Hy :results output
    obj.values
    #+end_src

    #+RESULTS:
    : array([ 4,  7, -5,  3])
- The rest
  #+begin_src hy :session Hy :results output
    (setv obj2 (pd.Series [4 7 -5 3] :index ["d" "b" "a" "c"]))
    (print obj2)
    (print obj2.index)

    ;; Accessing Series elements.
    (print obj2.a)
    (print (get obj2 "b"))
    (print (. obj2 a))

    (setv obj2.d 6)

    (print obj2["c" "a" "d"])

    (. obj2 [(> obj2 0)])

    (* obj2 2)

    (np.exp obj2)

    (in "b" obj2)
    (in "e" obj2)

    (setv sdata {"Ohio" 3500 "Texas" 71000 "Oregon" 16000 "Utah" 5000})
    (setv obj3 (pd.Series sdata))

    (print obj3)

    (setv states ["California" "Ohio" "Oregon" "Texas"])
    (setv obj4 (pd.Series sdata :index states))
    (print obj4)
    (pd.isnull obj4)
    (pd.notnull obj4)

    (obj4.isnull)

    (+ obj3 obj4)

    (setv obj4.name "population")
    (setv obj4.index.name "state")

    (print obj)
    (setv obj.index ["Bob" "Steve" "Jeff" "Ryan"])
    (print obj)
  #+end_src

  #+RESULTS:
  #+begin_example
  d    4
  b    7
  a   -5
  c    3
  dtype: int64
  Index(['d', 'b', 'a', 'c'], dtype='object')
  -5
  7
  -5
  d    6
  b    7
  a   -5
  c    3
  dtype: int64 ['c', 'a', 'd']
  d    6
  b    7
  c    3
  dtype: int64
  d    12
  b    14
  a   -10
  c     6
  dtype: int64
  d     403.428793
  b    1096.633158
  a       0.006738
  c      20.085537
  dtype: float64
  True
  False
  Ohio       3500
  Texas     71000
  Oregon    16000
  Utah       5000
  dtype: int64
  California        NaN
  Ohio           3500.0
  Oregon        16000.0
  Texas         71000.0
  dtype: float64
  California     True
  Ohio          False
  Oregon        False
  Texas         False
  dtype: bool
  California    False
  Ohio           True
  Oregon         True
  Texas          True
  dtype: bool
  California     True
  Ohio          False
  Oregon        False
  Texas         False
  dtype: bool
  California         NaN
  Ohio            7000.0
  Oregon         32000.0
  Texas         142000.0
  Utah               NaN
  dtype: float64
  0    4
  1    7
  2   -5
  3    3
  dtype: int64
  Bob      4
  Steve    7
  Jeff    -5
  Ryan     3
  dtype: int64
  #+end_example

*** DataFrame
=DataFrame= is analogous to SQL table/view/select.  It's an ordered
table of columns. So =DataFrame= is a dict of (column-name -> Series)
or set of columns.

**** Dict -> List
#+begin_src hy :session Hy :results output org drawer
  (setv data {"state" ["Ohio" "Ohio" "Ohio" "Nevada" "Nevada" "Nevada"]
              "year" [2000 2001 2002 2001 2002 2003]
              "pop" [1.5 1.7 3.6 2.4 2.9 3.2]})

  (setv frame (pd.DataFrame data
                            :columns ["year" "state" "pop" "debt"]
                            :index ["one" "two" "three" "four" "five" "six"]))
  (print-org-table frame)
  (print (* "-" 13))
  (print frame.columns)
  (print (* "-" 13))
  (print frame.state)
  (print (* "-" 13))
  (print (. frame.loc ["three"]))
  (print (* "-" 13))
  (setv frame.debt (np.arange 6.))
  (print frame)
  (print (* "-" 13))
  (setv frame.debt (pd.Series [-1.2 -1.5 -1.7] :index ["two" "four" "five"]))
  (print frame)
  (print (* "-" 13))
  (setv (. frame ["eastern"]) (= frame.state "Ohio"))
  (print frame)
  (del (. frame ["eastern"]))
  (print frame.columns)
  (print (* "-" 13))
#+end_src

#+RESULTS:
:results:
... ... ... ...
|       |   year | state   |   pop |   debt |
|-------+--------+---------+-------+--------|
| one   |   2000 | Ohio    |   1.5 |    nan |
| two   |   2001 | Ohio    |   1.7 |    nan |
| three |   2002 | Ohio    |   3.6 |    nan |
| four  |   2001 | Nevada  |   2.4 |    nan |
| five  |   2002 | Nevada  |   2.9 |    nan |
| six   |   2003 | Nevada  |   3.2 |    nan |
-------------
Index(['year', 'state', 'pop', 'debt'], dtype='object')
-------------
one        Ohio
two        Ohio
three      Ohio
four     Nevada
five     Nevada
six      Nevada
Name: state, dtype: object
-------------
year     2002
state    Ohio
pop       3.6
debt      NaN
Name: three, dtype: object
-------------
       year   state  pop  debt
one    2000    Ohio  1.5   0.0
two    2001    Ohio  1.7   1.0
three  2002    Ohio  3.6   2.0
four   2001  Nevada  2.4   3.0
five   2002  Nevada  2.9   4.0
six    2003  Nevada  3.2   5.0
-------------
       year   state  pop  debt
one    2000    Ohio  1.5   NaN
two    2001    Ohio  1.7  -1.2
three  2002    Ohio  3.6   NaN
four   2001  Nevada  2.4  -1.5
five   2002  Nevada  2.9  -1.7
six    2003  Nevada  3.2   NaN
-------------
       year   state  pop  debt  eastern
one    2000    Ohio  1.5   NaN     True
two    2001    Ohio  1.7  -1.2     True
three  2002    Ohio  3.6   NaN     True
four   2001  Nevada  2.4  -1.5    False
five   2002  Nevada  2.9  -1.7    False
six    2003  Nevada  3.2   NaN    False
Index(['year', 'state', 'pop', 'debt'], dtype='object')
-------------
:end:
**** Dict -> Dict
#+begin_src hy :session Hy :results output org drawer
  (setv pop {"Ohio" {2000 1.5
                     2001 1.7
                     2002 3.6}
             "Nevada" {2001 2.4
                       2002 2.9}})
  (setv frame3 (pd.DataFrame pop))
  (print-org-table frame3)
  (print (* "-" 13))
  (print-org-table frame3.T)
  (print (* "-" 13))
  (setv pdata {"Ohio" (cut (. frame3 ["Ohio"]) None -1)
               "Nevada" (cut (. frame3 ["Nevada"]) None 2)})
  (print-org-table (pd.DataFrame pdata))
  (setv frame3.index.name  "year")
  (setv frame3.columns.name  "state")
  (print frame3)
  (print frame3.values)
#+end_src

#+RESULTS:
:results:
... ... ... ...
|      |   Ohio |   Nevada |
|------+--------+----------|
| 2000 |    1.5 |    nan   |
| 2001 |    1.7 |      2.4 |
| 2002 |    3.6 |      2.9 |
-------------
|        |   2000 |   2001 |   2002 |
|--------+--------+--------+--------|
| Ohio   |    1.5 |    1.7 |    3.6 |
| Nevada |  nan   |    2.4 |    2.9 |
-------------
...
|      |   Ohio |   Nevada |
|------+--------+----------|
| 2000 |    1.5 |    nan   |
| 2001 |    1.7 |      2.4 |
state  Ohio  Nevada
year
2000    1.5     NaN
2001    1.7     2.4
2002    3.6     2.9
[[1.5 nan]
 [1.7 2.4]
 [3.6 2.9]]
:end:
**** Index
#+begin_src hy :session Hy :results output org drawer
(setv frame (pd.DataFrame [{"x" 1, "y" 2, "z" 3}] :index ["q" "w" "e"]))
(print frame)
(in "x" frame.columns)
#+end_src

#+RESULTS:
:results:
x  y  z
q  1  2  3
w  1  2  3
e  1  2  3
True
:end:
** 5.2 Essential Functionality
*** Reindexing
- Set ~obj~
  #+begin_src hy :session Hy :results output
  (setx obj (pd.Series [4.5 7.2 -5.3 3.6] :index ["d" "b" "a" "c"]))
  #+end_src

  #+RESULTS:
  : d    4.5
  : b    7.2
  : a   -5.3
  : c    3.6
  : dtype: float64
- Set ~obj2~
  #+begin_src hy :session Hy :results output
  (setx obj2 (obj.reindex ["a" "b" "c" "d" "e"]))
  #+end_src

  #+RESULTS:
  : a   -5.3
  : b    7.2
  : c    3.6
  : d    4.5
  : e    NaN
  : dtype: float64
- Set ~obj3~
  #+begin_src hy :session Hy :results output
  (setx obj3 (pd.Series ["blue" "purple" "yellow"] :index [0 2 4]))
  #+end_src

  #+RESULTS:
  : 0      blue
  : 2    purple
  : 4    yellow
  : dtype: object
- Reindex with ~ffill~
  #+begin_src hy :session Hy :results output
    (obj3.reindex (range 6) :method "ffill")
  #+end_src

  #+RESULTS:
  : 0      blue
  : 1      blue
  : 2    purple
  : 3    purple
  : 4    yellow
  : 5    yellow
  : dtype: object
*** Dropping entries from an Axis
- Set ~obj~
  #+begin_src hy :session Hy :results output
      (setx obj (pd.Series (np.arange 5.) :index ["a" "b" "c" "d" "e"]))
  #+end_src

  #+RESULTS:
  : a    0.0
  : b    1.0
  : c    2.0
  : d    3.0
  : e    4.0
  : dtype: float64
- Drop ~c~
  #+begin_src hy :session Hy :results output
  (setx new_obj (obj.drop "c"))
  #+end_src

  #+RESULTS:
  : a    0.0
  : b    1.0
  : d    3.0
  : e    4.0
  : dtype: float64
- Drop ~[d c]~
  #+begin_src hy :session Hy :results output
  (obj.drop ["d" "c"])
  #+end_src

  #+RESULTS:
  : a    0.0
  : b    1.0
  : e    4.0
  : dtype: float64
- Tuple syntax example
  #+begin_src hy :session Hy :results output
    (setv data (pd.DataFrame (.reshape (np.arange 16) (, 4 4))
                             :index ["Ohio" "Colorado" "Utah" "New York"]
                             :columns ["one" "two" "three" "four"]))
    (print data)
    (print (data.drop ["Colorado" "Ohio"]))
    (print (data.drop "two" :axis 1))
  #+end_src

  #+RESULTS:
  #+begin_example
  ... ...           one  two  three  four
  Ohio        0    1      2     3
  Colorado    4    5      6     7
  Utah        8    9     10    11
  New York   12   13     14    15
  one  two  three  four
  Utah        8    9     10    11
  New York   12   13     14    15
  one  three  four
  Ohio        0      2     3
  Colorado    4      6     7
  Utah        8     10    11
  New York   12     14    15
  #+end_example
- Drop in place
 #+begin_src hy :session Hy :results output
 (obj.drop "c" :inplace True)
 obj
 #+end_src

 #+RESULTS:
 : a    0.0
 : b    1.0
 : d    3.0
 : e    4.0
 : dtype: float64
*** Indexing, Selection, and Filtering
- Set ~obj~
  #+begin_src hy :session Hy :results output
  (setx obj ( pd.Series (np.arange 4.) :index ["a" "b" "c" "d"]))
  #+end_src

  #+RESULTS:
  : a    0.0
  : b    1.0
  : c    2.0
  : d    3.0
  : dtype: float64
- Get by string index
  #+begin_src hy :session Hy :results output
  (obj.get "b")
  #+end_src

  #+RESULTS:
  : 1.0
- Get by slice index
  #+begin_src hy :session Hy :results output
  (obj.get (slice 2 4))
  #+end_src

  #+RESULTS:
  : c    2.0
  : d    3.0
  : dtype: float64
- Get (reindex) by list
  #+begin_src hy :session Hy :results output
  (obj.reindex ["b" "a" "d"])
  #+end_src

  #+RESULTS:
  : b    1.0
  : a    0.0
  : d    3.0
  : dtype: float64
- Get selected rows
  #+begin_src hy :session Hy :results output
  (obj.get [1 3])
  #+end_src

  #+RESULTS:
  : b    1.0
  : d    3.0
  : dtype: float64
- Get by value
  #+begin_src hy :session Hy :results output
  (obj.get (< obj 2))
  #+end_src

  #+RESULTS:
  : a    0.0
  : b    1.0
  : dtype: float64
- Get by row names
 #+begin_src hy :session Hy :results output
 (obj.get (slice "b" "c"))
 #+end_src

 #+RESULTS:
 : b    1.0
 : c    2.0
 : dtype: float64
- Set with index
  #+begin_src hy :session Hy :results output
  (assoc obj (slice "b" "c") 5)
  obj
  #+end_src

  #+RESULTS:
  : a    0.0
  : b    5.0
  : c    5.0
  : d    3.0
  : dtype: float64
- Set ~data~
  #+begin_src hy :session Hy :results output
    (setv data (pd.DataFrame (-> np (.arange 16) (.reshape (, 4 4)))
                             :index ["Ohio" "Colorado" "Utah" "New York"]
                             :columns ["one" "two" "three" "four"]))
    (print-org-table data)
  #+end_src

  #+RESULTS:
  : ... ...
  : |          |   one |   two |   three |   four |
  : |----------+-------+-------+---------+--------|
  : | Ohio     |     0 |     1 |       2 |      3 |
  : | Colorado |     4 |     5 |       6 |      7 |
  : | Utah     |     8 |     9 |      10 |     11 |
  : | New York |    12 |    13 |      14 |     15 |
- Select by column name
  #+begin_src hy :session Hy :results output
  (data.get "two")
  #+end_src

  #+RESULTS:
  : Ohio         1
  : Colorado     5
  : Utah         9
  : New York    13
  : Name: two, dtype: int64
- Select several columns
  #+begin_src hy :session Hy :results output
  (print-org-table (data.get ["three" "one"]))
  #+end_src

  #+RESULTS:
  : |          |   three |   one |
  : |----------+---------+-------|
  : | Ohio     |       2 |     0 |
  : | Colorado |       6 |     4 |
  : | Utah     |      10 |     8 |
  : | New York |      14 |    12 |
- Select slice of columns
  #+begin_src hy :session Hy :results output
  (print-org-table (data.get (slice 2)))
  #+end_src

  #+RESULTS:
  : |          |   one |   two |   three |   four |
  : |----------+-------+-------+---------+--------|
  : | Ohio     |     0 |     1 |       2 |      3 |
  : | Colorado |     4 |     5 |       6 |      7 |
- Select by condition
  #+begin_src hy :session Hy :results output
  (print-org-table (data.get (> (data.get "three") 5)))
  #+end_src

  #+RESULTS:
  : |          |   one |   two |   three |   four |
  : |----------+-------+-------+---------+--------|
  : | Colorado |     4 |     5 |       6 |      7 |
  : | Utah     |     8 |     9 |      10 |     11 |
  : | New York |    12 |    13 |      14 |     15 |
- Boolean dataframe example
  #+begin_src hy :session Hy :results output
  (< data 5)
  #+end_src

  #+RESULTS:
  : one    two  three   four
  : Ohio       True   True   True   True
  : Colorado   True  False  False  False
  : Utah      False  False  False  False
  : New York  False  False  False  False
- Set using boolean dataframe
  #+begin_src hy :session Hy :results output
  (assoc data (< data 5) 0)
  (print-org-table data)
  #+end_src

  #+RESULTS:
  : |          |   one |   two |   three |   four |
  : |----------+-------+-------+---------+--------|
  : | Ohio     |     0 |     0 |       0 |      0 |
  : | Colorado |     0 |     5 |       6 |      7 |
  : | Utah     |     8 |     9 |      10 |     11 |
  : | New York |    12 |    13 |      14 |     15 |

**** Selection with ~loc~ and ~iloc~
- Select single sub row by label
  #+begin_src hy :session Hy :results output
  (get data.loc "Colorado" ["two" "three"])
  #+end_src

  #+RESULTS:
  : two      5
  : three    6
  : Name: Colorado, dtype: int64
- Select single sub row using indices
  #+begin_src hy :session Hy :results output
  (get data.iloc 2 [3 0 1])
  #+end_src

  #+RESULTS:
  : four    11
  : one      8
  : two      9
  : Name: Utah, dtype: int64
- Select full row by index
  #+begin_src hy :session Hy :results output
  (get data.iloc 2)
  #+end_src

  #+RESULTS:
  : one       8
  : two       9
  : three    10
  : four     11
  : Name: Utah, dtype: int64
- Select rows and columns using indices and reordering
  #+begin_src hy :session Hy :results output
  (print-org-table (get data.iloc (, [1 2] [3 0 1])))
  #+end_src

  #+RESULTS:
  : |          |   four |   one |   two |
  : |----------+--------+-------+-------|
  : | Colorado |      7 |     0 |     5 |
  : | Utah     |     11 |     8 |     9 |
- Select with slices
  #+begin_src hy :session Hy :results output
  (get data.loc (, (slice "Utah") "two"))
  #+end_src

  #+RESULTS:
  : Ohio        0
  : Colorado    5
  : Utah        9
  : Name: two, dtype: int64
- Select with slices and boolean dataframe
  #+begin_src hy :session Hy :results output
    (print-org-table (-> data.iloc
                         (get (, (slice None None) (slice 3)))
                         (get (> data.three 5))))
  #+end_src

  #+RESULTS:
  : ... ...
  : |          |   one |   two |   three |
  : |----------+-------+-------+---------|
  : | Colorado |     0 |     5 |       6 |
  : | Utah     |     8 |     9 |      10 |
  : | New York |    12 |    13 |      14 |

*** Integer Indexes
- Set ~ser~ and ~ser2~
  #+begin_src hy :session Hy :results output
  (setx ser (pd.Series (np.arange 3.)))
  (setx ser2 (pd.Series (np.arange 3.) :index ["a" "b" "c"]))
  #+end_src

  #+RESULTS:
  : 0    0.0
  : 1    1.0
  : 2    2.0
  : dtype: float64
  : a    0.0
  : b    1.0
  : c    2.0
  : dtype: float64
- Get by integer index from ~ser2~
  #+begin_src hy :session Hy :results output
  (get ser2 -1)
  #+end_src

  #+RESULTS:
  : 2.0
- Get by slice from ~ser~
  #+begin_src hy :session Hy :results value output
  (get ser (slice 1))
  #+end_src

  #+RESULTS:
  : 0    0.0
  : dtype: float64
- Get by slice via ~loc~ from ~ser~
  #+begin_src hy :session Hy :results output
  (get ser.loc (slice 1))
  #+end_src

  #+RESULTS:
  : 0    0.0
  : 1    1.0
  : dtype: float64
- Get by slice via ~iloc~ from ~ser~
  #+begin_src hy :session Hy :results output
  (get ser.iloc (slice 1))
  #+end_src

  #+RESULTS:
  : 0    0.0
  : dtype: float64

*** Arithmetic and Data Alignment
- Set ~s1~
  #+begin_src hy :session Hy :results output
    (setx s1 (pd.Series [7.3, -2.5, 3.4, 1.5] :index ["a" "c" "d" "e"]))
  #+end_src

  #+RESULTS:
  : a    7.3
  : c   -2.5
  : d    3.4
  : e    1.5
  : dtype: float64
- Set ~s2~
  #+begin_src hy :session Hy :results output
  (setx s2 (pd.Series [-2.1 3.6 -1.5 4 3.1] :index ["a" "c" "e" "f" "g"]))
  #+end_src

  #+RESULTS:
  : a   -2.1
  : c    3.6
  : e   -1.5
  : f    4.0
  : g    3.1
  : dtype: float64
- Add ~s1~ and ~s2~
  #+begin_src hy :session Hy :results output
  (+ s1 s2)
  #+end_src

  #+RESULTS:
  : a    5.2
  : c    1.1
  : d    NaN
  : e    0.0
  : f    NaN
  : g    NaN
  : dtype: float64
- Set ~df1~
  #+begin_src hy :session Hy :results output
    (print-org-table
      (setx df1 (pd.DataFrame (-> (np.arange 9.) (.reshape (, 3 3)))
                              :columns (list "bcd")
                              :index ["Ohio" "Texas" "Colorado"])))
  #+end_src

  #+RESULTS:
  : ... ... ...
  : |          |   b |   c |   d |
  : |----------+-----+-----+-----|
  : | Ohio     |   0 |   1 |   2 |
  : | Texas    |   3 |   4 |   5 |
  : | Colorado |   6 |   7 |   8 |
- Set ~df2~
  #+begin_src hy :session Hy :results output
  (print-org-table
      (setx df2 (pd.DataFrame (-> (np.arange 12.) (.reshape (, 4 3)))
                              :columns (list "bde")
                              :index ["Utah" "Ohio" "Texas" "Oregon"])))
  #+end_src

  #+RESULTS:
  : ... ... ...
  : |        |   b |   d |   e |
  : |--------+-----+-----+-----|
  : | Utah   |   0 |   1 |   2 |
  : | Ohio   |   3 |   4 |   5 |
  : | Texas  |   6 |   7 |   8 |
  : | Oregon |   9 |  10 |  11 |
- Add ~df1~ and ~df2~
  #+begin_src hy :session Hy :results output
  (print-org-table (+ df1 df2))
  #+end_src

  #+RESULTS:
  : |          |   b |   c |   d |   e |
  : |----------+-----+-----+-----+-----|
  : | Colorado | nan | nan | nan | nan |
  : | Ohio     |   3 | nan |   6 | nan |
  : | Oregon   | nan | nan | nan | nan |
  : | Texas    |   9 | nan |  12 | nan |
  : | Utah     | nan | nan | nan | nan |
- Add with ~fill_value~
  #+begin_src hy :session Hy :results output
  (print-org-table (df1.add df2 :fill-value 0))
  #+end_src

  #+RESULTS:
  : |          |   b |   c |   d |   e |
  : |----------+-----+-----+-----+-----|
  : | Colorado |   6 |   7 |   8 | nan |
  : | Ohio     |   3 |   1 |   6 |   5 |
  : | Oregon   |   9 | nan |  10 |  11 |
  : | Texas    |   9 |   4 |  12 |   8 |
  : | Utah     |   0 | nan |   1 |   2 |
**** Operation between ~DataFrame~ and ~Series~
- Set ~arr~
  #+begin_src hy :session Hy :results output
  (setx arr (-> (np.arange 12.) (.reshape (, 3 4))))
  (print)
  (get arr 0)
  #+end_src

  #+RESULTS:
  : array([[ 0.,  1.,  2.,  3.],
  :        [ 4.,  5.,  6.,  7.],
  :        [ 8.,  9., 10., 11.]])
  :
  : array([0., 1., 2., 3.])
- Sub ~arr[0]~ from ~arr~
  #+begin_src hy :session Hy :results output
  (- arr (get arr 0))
  #+end_src

  #+RESULTS:
  : array([[0., 0., 0., 0.],
  :        [4., 4., 4., 4.],
  :        [8., 8., 8., 8.]])
- Set ~frame~
  #+begin_src hy :session Hy :results output
    (print-org-table
      (setx frame (pd.DataFrame (-> (np.arange 12.) (.reshape (, 4 3)))
                                :columns (list "bde")
                                :index ["Utah" "Ohio" "Texas" "Oregon"])))
  #+end_src

  #+RESULTS:
  : ... ... ...
  : |        |   b |   d |   e |
  : |--------+-----+-----+-----|
  : | Utah   |   0 |   1 |   2 |
  : | Ohio   |   3 |   4 |   5 |
  : | Texas  |   6 |   7 |   8 |
  : | Oregon |   9 |  10 |  11 |
- Set ~series~
  #+begin_src hy :session Hy :results output
  (setx series (get frame.iloc 0))
  #+end_src

  #+RESULTS:
  : b    0.0
  : d    1.0
  : e    2.0
  : Name: Utah, dtype: float64
- Sub ~series~ from ~frame~
  #+begin_src hy :session Hy :results output
  (print-org-table (- frame series))
  #+end_src

  #+RESULTS:
  : |        |   b |   d |   e |
  : |--------+-----+-----+-----|
  : | Utah   |   0 |   0 |   0 |
  : | Ohio   |   3 |   3 |   3 |
  : | Texas  |   6 |   6 |   6 |
  : | Oregon |   9 |   9 |   9 |
- Set ~series2~
  #+begin_src hy :session Hy :results output
  (setx series2 (pd.Series (range 3) :index ["b" "e" "f"]))
  #+end_src

  #+RESULTS:
  : b    0
  : e    1
  : f    2
  : dtype: int64
- Add ~series2~ to ~frame~
  #+begin_src hy :session Hy :results output
  (print-org-table (+ frame series2))
  #+end_src

  #+RESULTS:
  : |        |   b |   d |   e |   f |
  : |--------+-----+-----+-----+-----|
  : | Utah   |   0 | nan |   3 | nan |
  : | Ohio   |   3 | nan |   6 | nan |
  : | Texas  |   6 | nan |   9 | nan |
  : | Oregon |   9 | nan |  12 | nan |
- Set ~series3~
  #+begin_src hy :session Hy :results output
  (setx series3 (get frame "d"))
  #+end_src

  #+RESULTS:
  : Utah       1.0
  : Ohio       4.0
  : Texas      7.0
  : Oregon    10.0
  : Name: d, dtype: float64
- Sub ~series2~ from ~frame~ with ~axis~
  #+begin_src hy :session Hy :results output
  (print-org-table (frame.sub series3 :axis "index"))
  #+end_src

  #+RESULTS:
  : |        |   b |   d |   e |
  : |--------+-----+-----+-----|
  : | Utah   |  -1 |   0 |   1 |
  : | Ohio   |  -1 |   0 |   1 |
  : | Texas  |  -1 |   0 |   1 |
  : | Oregon |  -1 |   0 |   1 |

*** Function Application and Mapping
- Set ~frame~
  #+begin_src hy :session Hy :results output
    (print-org-table
      (setx frame (pd.DataFrame (np.random.randn 4 3)
                                :columns (list "bde")
                                :index ["Utah" "Ohio" "Texas" "Oregon"])))
  #+end_src

  #+RESULTS:
  : ... ... ...
  : |        |           b |         d |          e |
  : |--------+-------------+-----------+------------|
  : | Utah   | -1.17341    |  0.707083 | -0.263856  |
  : | Ohio   | -0.371735   | -1.09474  |  0.753309  |
  : | Texas  |  1.67655    |  0.925579 | -0.0480439 |
  : | Oregon | -0.00600767 |  0.195848 | -1.57674   |
- Call ~np.abs~ on ~frame~
  #+begin_src hy :session Hy :results output
  (np.abs frame)
  #+end_src

  #+RESULTS:
  : b         d         e
  : Utah    1.173412  0.707083  0.263856
  : Ohio    0.371735  1.094736  0.753309
  : Texas   1.676552  0.925579  0.048044
  : Oregon  0.006008  0.195848  1.576739
- Apply lambda
  #+begin_src hy :session Hy :results output
  (.apply frame (fn [x] (- (x.max) (x.min))))
  #+end_src

  #+RESULTS:
  : b    2.849964
  : d    2.020315
  : e    2.330048
  : dtype: float64
- Apply to columns
  #+begin_src hy :session Hy :results output
  (.apply frame (fn [x] (- (.mean x) (.median x))) :axis "columns")
  #+end_src

  #+RESULTS:
  : Utah      0.020461
  : Ohio      0.134015
  : Texas    -0.074217
  : Oregon   -0.456292
  : dtype: float64
- Return ~Series~
  #+begin_src hy :session Hy :results output
  (print-org-table (.apply frame (fn [x] (pd.Series [(.min x) (.max x)] :index ["min" "max"]))))
  #+end_src

  #+RESULTS:
  : |     |        b |         d |         e |
  : |-----+----------+-----------+-----------|
  : | min | -1.17341 | -1.09474  | -1.57674  |
  : | max |  1.67655 |  0.925579 |  0.753309 |
- Call ~applymap~ and format string with truncation
  #+begin_src hy :session Hy :results output
  (print-org-table (.applymap frame (fn [x] f"{x :.2}")))
  #+end_src

  #+RESULTS:
  : |        |      b |     d |      e |
  : |--------+--------+-------+--------|
  : | Utah   | -1.2   |  0.71 | -0.26  |
  : | Ohio   | -0.37  | -1.1  |  0.75  |
  : | Texas  |  1.7   |  0.93 | -0.048 |
  : | Oregon | -0.006 |  0.2  | -1.6   |
- Series ~map~
  #+begin_src hy :session Hy :results output
    (.map (get frame "e") (fn [x] f"{x :.2}"))
  #+end_src

  #+RESULTS:
  : Utah       -0.26
  : Ohio        0.75
  : Texas     -0.048
  : Oregon      -1.6
  : Name: e, dtype: object
*** Sorting and Ranking
- Set ~obj~
  #+begin_src hy :session Hy :results output
  (setx obj (pd.Series (range 4) :index ["b" "a" "b" "c"]))
  #+end_src

  #+RESULTS:
  : b    0
  : a    1
  : b    2
  : c    3
  : dtype: int64
- Sort ~Series~ by index
  #+begin_src hy :session Hy :results output
  (obj.sort-index)
  #+end_src

  #+RESULTS:
  : a    1
  : b    0
  : b    2
  : c    3
  : dtype: int64
- Set ~frame~
  #+begin_src hy :session Hy :results output
    (print-org-table
      (setx frame (pd.DataFrame (-> (np.arange 8) (.reshape (, 2 4)))
                                :index ["three" "one"]
                                :columns ["d" "a" "b" "c"])))
  #+end_src

  #+RESULTS:
  : ... ... ...
  : |       |   d |   a |   b |   c |
  : |-------+-----+-----+-----+-----|
  : | three |   0 |   1 |   2 |   3 |
  : | one   |   4 |   5 |   6 |   7 |
- Sort by rows (sort-index, axis = 0)
  #+begin_src hy :session Hy :results output
  (print-org-table (frame.sort-index))
  #+end_src

  #+RESULTS:
  : |       |   d |   a |   b |   c |
  : |-------+-----+-----+-----+-----|
  : | one   |   4 |   5 |   6 |   7 |
  : | three |   0 |   1 |   2 |   3 |
- Sort by columns (sort-index, axis = 1)
  #+begin_src hy :session Hy :results output
  (print-org-table (frame.sort-index :axis 1))
  #+end_src

  #+RESULTS:
  : |       |   a |   b |   c |   d |
  : |-------+-----+-----+-----+-----|
  : | three |   1 |   2 |   3 |   0 |
  : | one   |   5 |   6 |   7 |   4 |
- Sort order (ascending)
  #+begin_src hy :session Hy :results output
  (print-org-table (frame.sort-index :axis 1 :ascending False))
  #+end_src

  #+RESULTS:
  : |       |   d |   c |   b |   a |
  : |-------+-----+-----+-----+-----|
  : | three |   0 |   3 |   2 |   1 |
  : | one   |   4 |   7 |   6 |   5 |
- Set ~obj~
  #+begin_src hy :session Hy :results output
  (setx obj (pd.Series [4 7 -3 2]))
  #+end_src

  #+RESULTS:
  : 0    4
  : 1    7
  : 2   -3
  : 3    2
  : dtype: int64
- Sort ~Series~ by value
  #+begin_src hy :session Hy :results output
  (obj.sort-values)
  #+end_src

  #+RESULTS:
  : 2   -3
  : 3    2
  : 0    4
  : 1    7
  : dtype: int64
- Set ~obj~ with missing values
  #+begin_src hy :session Hy :results output
  (setx obj (pd.Series [4 np.nan 7 np.nan -3 2]))
  #+end_src

  #+RESULTS:
  : 0    4.0
  : 1    NaN
  : 2    7.0
  : 3    NaN
  : 4   -3.0
  : 5    2.0
  : dtype: float64
- Sort ~Series~ with missing values
  #+begin_src hy :session Hy :results output
  (obj.sort-values)
  #+end_src

  #+RESULTS:
  : 4   -3.0
  : 5    2.0
  : 0    4.0
  : 2    7.0
  : 1    NaN
  : 3    NaN
  : dtype: float64
- Set ~frame~
  #+begin_src hy :session Hy :results output
  (print-org-table (setx frame (pd.DataFrame {"b" [4 7 -3 2] "a" [0 1 0 1]})))
  #+end_src

  #+RESULTS:
  : |    |   b |   a |
  : |----+-----+-----|
  : |  0 |   4 |   0 |
  : |  1 |   7 |   1 |
  : |  2 |  -3 |   0 |
  : |  3 |   2 |   1 |
- Sort ~DataFrame~ by specified column
  #+begin_src hy :session Hy :results output
  (print-org-table (frame.sort-values :by "b"))
  #+end_src

  #+RESULTS:
  : |    |   b |   a |
  : |----+-----+-----|
  : |  2 |  -3 |   0 |
  : |  3 |   2 |   1 |
  : |  0 |   4 |   0 |
  : |  1 |   7 |   1 |
- Sort ~DataFrame~ by multiple columns
  #+begin_src hy :session Hy :results output
  (print-org-table (frame.sort-values :by ["a" "b"]))
  #+end_src

  #+RESULTS:
  : |    |   b |   a |
  : |----+-----+-----|
  : |  2 |  -3 |   0 |
  : |  0 |   4 |   0 |
  : |  3 |   2 |   1 |
  : |  1 |   7 |   1 |
- Set ~obj~
  #+begin_src hy :session Hy :results output
  (setx obj (pd.Series [7 -5 7 4 2 0 4]))
  #+end_src

  #+RESULTS:
  : 0    7
  : 1   -5
  : 2    7
  : 3    4
  : 4    2
  : 5    0
  : 6    4
  : dtype: int64
- Ranking
  #+begin_src hy :session Hy :results output
  (obj.rank)
  #+end_src

  #+RESULTS:
  : 0    6.5
  : 1    1.0
  : 2    6.5
  : 3    4.5
  : 4    3.0
  : 5    2.0
  : 6    4.5
  : dtype: float64
- Rank by ~first~
  #+begin_src hy :session Hy :results output
  (obj.rank :method "first")
  #+end_src

  #+RESULTS:
  : 0    6.0
  : 1    1.0
  : 2    7.0
  : 3    4.0
  : 4    3.0
  : 5    2.0
  : 6    5.0
  : dtype: float64
- Rank in descending order using ~max~
  #+begin_src hy :session Hy :results output
  (obj.rank :ascending False :method "max")
  #+end_src

  #+RESULTS:
  : 0    2.0
  : 1    7.0
  : 2    2.0
  : 3    4.0
  : 4    5.0
  : 5    6.0
  : 6    4.0
  : dtype: float64
- Set ~frame~
  #+begin_src hy :session Hy :results output
    (print-org-table
      (setx frame (pd.DataFrame {"b" [4.3 7 -3 2]
                                 "a" [0 1 0 1]
                                 "c" [-2 5 8 -2.5]})))
  #+end_src

  #+RESULTS:
  : ... ... ...
  : |    |    b |   a |    c |
  : |----+------+-----+------|
  : |  0 |  4.3 |   0 | -2   |
  : |  1 |  7   |   1 |  5   |
  : |  2 | -3   |   0 |  8   |
  : |  3 |  2   |   1 | -2.5 |
- Rank ~DataFrame~ by columns
  #+begin_src hy :session Hy :results output
  (print-org-table (frame.rank :axis "columns"))
  #+end_src

  #+RESULTS:
  : |    |   b |   a |   c |
  : |----+-----+-----+-----|
  : |  0 |   3 |   2 |   1 |
  : |  1 |   3 |   1 |   2 |
  : |  2 |   1 |   2 |   3 |
  : |  3 |   3 |   2 |   1 |
*** Axis Indexes with Duplicate Labels
- TBD
* 9 Visualization
#+begin_src hy :session Hy :results file link :file "/tmp/myfig.png"
  (setv data (np.linspace (- np.pi) np.pi 201))
  (plt.plot data (np.sin data))
  (plt.xlabel "Angle [rad]")
  (plt.ylabel "sin(x)")
  (plt.axis "tight")
  (plt.savefig "/tmp/myfig.png")
#+end_src

#+RESULTS:
[[file:/tmp/myfig.png]]
